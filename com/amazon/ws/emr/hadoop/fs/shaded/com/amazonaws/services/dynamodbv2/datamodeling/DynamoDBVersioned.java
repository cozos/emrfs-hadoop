package com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.dynamodbv2.datamodeling;

import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.math.BigInteger;
import java.util.Arrays;

@DynamoDB
@DynamoDBAutoGenerated(generator=Generator.class)
@Retention(RetentionPolicy.RUNTIME)
@Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.ANNOTATION_TYPE})
public @interface DynamoDBVersioned
{
  public static final class Generator<T>
    extends DynamoDBAutoGenerator.AbstractGenerator<T>
  {
    private final Sequence<T> sequence;
    
    public Generator(Class<T> targetType, DynamoDBVersioned annotation)
    {
      super();
      sequence = Sequences.of(targetType);
    }
    
    public final T generate(T currentValue)
    {
      return (T)(currentValue == null ? sequence.init() : sequence.next(currentValue));
    }
    
    private static enum Sequences
    {
      BIG_INTEGER(StandardTypeConverters.Scalar.BIG_INTEGER, new DynamoDBVersioned.Generator.Sequence()),  BYTE(StandardTypeConverters.Scalar.BYTE, new DynamoDBVersioned.Generator.Sequence()),  INTEGER(StandardTypeConverters.Scalar.INTEGER, new DynamoDBVersioned.Generator.Sequence()),  LONG(StandardTypeConverters.Scalar.LONG, new DynamoDBVersioned.Generator.Sequence()),  SHORT(StandardTypeConverters.Scalar.SHORT, new DynamoDBVersioned.Generator.Sequence());
      
      private final DynamoDBVersioned.Generator.Sequence<?> sequence;
      private final StandardTypeConverters.Scalar scalar;
      
      private Sequences(StandardTypeConverters.Scalar scalar, DynamoDBVersioned.Generator.Sequence<?> sequence)
      {
        this.sequence = sequence;
        this.scalar = scalar;
      }
      
      private static final <T> DynamoDBVersioned.Generator.Sequence<T> of(Class<T> targetType)
      {
        for (Sequences s : ) {
          if (scalar.is(targetType)) {
            return sequence;
          }
        }
        throw new DynamoDBMappingException("type [" + targetType + "] is not supported; allowed only " + Arrays.toString(values()));
      }
    }
    
    static abstract interface Sequence<T>
    {
      public abstract T init();
      
      public abstract T next(T paramT);
    }
  }
}

/* Location:
 * Qualified Name:     com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersioned
 * Java Class Version: 6 (50.0)
 * JD-Core Version:    0.7.1
 */