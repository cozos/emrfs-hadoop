package com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.dynamodbv2.datamodeling;

import com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.annotation.GuardedBy;
import com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.annotation.SdkInternalApi;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;

@Deprecated
@SdkInternalApi
class DynamoDBReflector
{
  private final Map<Class<?>, Collection<Method>> getterCache = new HashMap();
  private final Map<Class<?>, Method> primaryHashKeyGetterCache = new HashMap();
  private final Map<Class<?>, Method> primaryRangeKeyGetterCache = new HashMap();
  private final Map<Class<?>, List<Method>> primaryKeyGettersCache = new HashMap();
  private final Map<Method, Method> setterCache = new HashMap();
  @GuardedBy("readWriteLockAttrName")
  private final Map<Method, String> attributeNameCache = new HashMap();
  private final Map<Method, Boolean> versionAttributeGetterCache = new HashMap();
  private final Map<Method, Boolean> autoGeneratedKeyGetterCache = new HashMap();
  private final ReentrantReadWriteLock readWriteLockAttrName = new ReentrantReadWriteLock();
  private final ReentrantReadWriteLock.ReadLock readLockAttrName = readWriteLockAttrName.readLock();
  private final ReentrantReadWriteLock.WriteLock writeLockAttrName = readWriteLockAttrName.writeLock();
  
  Collection<Method> getRelevantGetters(Class<?> clazz)
  {
    synchronized (getterCache)
    {
      if (!getterCache.containsKey(clazz))
      {
        List<Method> relevantGetters = findRelevantGetters(clazz);
        getterCache.put(clazz, relevantGetters);
      }
      return (Collection)getterCache.get(clazz);
    }
  }
  
  static List<Method> findRelevantGetters(Class<?> clazz)
  {
    List<Method> relevantGetters = new LinkedList();
    for (Method m : clazz.getMethods()) {
      if (isRelevantGetter(m)) {
        relevantGetters.add(m);
      }
    }
    return relevantGetters;
  }
  
  private static boolean isRelevantGetter(Method m)
  {
    return ((m.getName().startsWith("get")) || (m.getName().startsWith("is"))) && 
      (m.getParameterTypes().length == 0) && 
      (!m.isBridge()) && (!m.isSynthetic()) && 
      (isDocumentType(m.getDeclaringClass())) && 
      (!ReflectionUtils.getterOrFieldHasAnnotation(m, DynamoDBIgnore.class));
  }
  
  private static boolean isDocumentType(Class<?> clazz)
  {
    return (clazz.getAnnotation(DynamoDBTable.class) != null) || 
      (clazz.getAnnotation(DynamoDBDocument.class) != null);
  }
  
  <T> Method getPrimaryRangeKeyGetter(Class<T> clazz)
  {
    synchronized (primaryRangeKeyGetterCache)
    {
      if (!primaryRangeKeyGetterCache.containsKey(clazz))
      {
        Method rangeKeyMethod = null;
        for (Method method : getRelevantGetters(clazz)) {
          if ((method.getParameterTypes().length == 0) && 
            (ReflectionUtils.getterOrFieldHasAnnotation(method, DynamoDBRangeKey.class)))
          {
            rangeKeyMethod = method;
            break;
          }
        }
        primaryRangeKeyGetterCache.put(clazz, rangeKeyMethod);
      }
      return (Method)primaryRangeKeyGetterCache.get(clazz);
    }
  }
  
  <T> Collection<Method> getPrimaryKeyGetters(Class<T> clazz)
  {
    synchronized (primaryKeyGettersCache)
    {
      if (!primaryKeyGettersCache.containsKey(clazz))
      {
        List<Method> keyGetters = new LinkedList();
        for (Method getter : getRelevantGetters(clazz)) {
          if ((ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBHashKey.class)) || 
            (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBRangeKey.class))) {
            keyGetters.add(getter);
          }
        }
        primaryKeyGettersCache.put(clazz, keyGetters);
      }
      return (Collection)primaryKeyGettersCache.get(clazz);
    }
  }
  
  <T> Method getPrimaryHashKeyGetter(Class<T> clazz)
  {
    Method hashKeyMethod;
    synchronized (primaryHashKeyGetterCache)
    {
      if (!primaryHashKeyGetterCache.containsKey(clazz)) {
        for (Method method : getRelevantGetters(clazz)) {
          if ((method.getParameterTypes().length == 0) && 
            (ReflectionUtils.getterOrFieldHasAnnotation(method, DynamoDBHashKey.class)))
          {
            primaryHashKeyGetterCache.put(clazz, method);
            break;
          }
        }
      }
      hashKeyMethod = (Method)primaryHashKeyGetterCache.get(clazz);
    }
    Method hashKeyMethod;
    if (hashKeyMethod == null) {
      throw new DynamoDBMappingException("Public, zero-parameter hash key property must be annotated with " + DynamoDBHashKey.class);
    }
    return hashKeyMethod;
  }
  
  <T> DynamoDBTable getTable(Class<T> clazz)
  {
    DynamoDBTable table = (DynamoDBTable)clazz.getAnnotation(DynamoDBTable.class);
    if (table == null) {
      throw new DynamoDBMappingException("Class " + clazz + " must be annotated with " + DynamoDBTable.class);
    }
    return table;
  }
  
  /* Error */
  String getAttributeName(Method getter)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 70	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:readLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   4: invokevirtual 242	java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock:lock	()V
    //   7: aload_0
    //   8: getfield 57	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:attributeNameCache	Ljava/util/Map;
    //   11: aload_1
    //   12: invokeinterface 98 2 0
    //   17: checkcast 139	java/lang/String
    //   20: astore_2
    //   21: aload_0
    //   22: getfield 70	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:readLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   25: invokevirtual 245	java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock:unlock	()V
    //   28: goto +13 -> 41
    //   31: astore_3
    //   32: aload_0
    //   33: getfield 70	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:readLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   36: invokevirtual 245	java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock:unlock	()V
    //   39: aload_3
    //   40: athrow
    //   41: aload_2
    //   42: ifnull +5 -> 47
    //   45: aload_2
    //   46: areturn
    //   47: aload_1
    //   48: ldc -51
    //   50: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   53: checkcast 205	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBHashKey
    //   56: astore_3
    //   57: aload_3
    //   58: ifnull +28 -> 86
    //   61: aload_3
    //   62: invokeinterface 252 1 0
    //   67: astore_2
    //   68: aload_2
    //   69: ifnull +17 -> 86
    //   72: aload_2
    //   73: invokevirtual 256	java/lang/String:length	()I
    //   76: ifle +10 -> 86
    //   79: aload_0
    //   80: aload_1
    //   81: aload_2
    //   82: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   85: areturn
    //   86: aload_1
    //   87: ldc_w 262
    //   90: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   93: checkcast 262	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBIndexHashKey
    //   96: astore 4
    //   98: aload 4
    //   100: ifnull +29 -> 129
    //   103: aload 4
    //   105: invokeinterface 263 1 0
    //   110: astore_2
    //   111: aload_2
    //   112: ifnull +17 -> 129
    //   115: aload_2
    //   116: invokevirtual 256	java/lang/String:length	()I
    //   119: ifle +10 -> 129
    //   122: aload_0
    //   123: aload_1
    //   124: aload_2
    //   125: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   128: areturn
    //   129: aload_1
    //   130: ldc -57
    //   132: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   135: checkcast 199	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBRangeKey
    //   138: astore 5
    //   140: aload 5
    //   142: ifnull +29 -> 171
    //   145: aload 5
    //   147: invokeinterface 264 1 0
    //   152: astore_2
    //   153: aload_2
    //   154: ifnull +17 -> 171
    //   157: aload_2
    //   158: invokevirtual 256	java/lang/String:length	()I
    //   161: ifle +10 -> 171
    //   164: aload_0
    //   165: aload_1
    //   166: aload_2
    //   167: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   170: areturn
    //   171: aload_1
    //   172: ldc_w 266
    //   175: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   178: checkcast 266	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBIndexRangeKey
    //   181: astore 6
    //   183: aload 6
    //   185: ifnull +29 -> 214
    //   188: aload 6
    //   190: invokeinterface 267 1 0
    //   195: astore_2
    //   196: aload_2
    //   197: ifnull +17 -> 214
    //   200: aload_2
    //   201: invokevirtual 256	java/lang/String:length	()I
    //   204: ifle +10 -> 214
    //   207: aload_0
    //   208: aload_1
    //   209: aload_2
    //   210: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   213: areturn
    //   214: aload_1
    //   215: ldc_w 269
    //   218: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   221: checkcast 269	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBAttribute
    //   224: astore 7
    //   226: aload 7
    //   228: ifnull +29 -> 257
    //   231: aload 7
    //   233: invokeinterface 270 1 0
    //   238: astore_2
    //   239: aload_2
    //   240: ifnull +17 -> 257
    //   243: aload_2
    //   244: invokevirtual 256	java/lang/String:length	()I
    //   247: ifle +10 -> 257
    //   250: aload_0
    //   251: aload_1
    //   252: aload_2
    //   253: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   256: areturn
    //   257: aload_1
    //   258: ldc_w 272
    //   261: invokestatic 249	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getAnnotationFromGetterOrField	(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
    //   264: checkcast 272	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBVersionAttribute
    //   267: astore 8
    //   269: aload 8
    //   271: ifnull +29 -> 300
    //   274: aload 8
    //   276: invokeinterface 273 1 0
    //   281: astore_2
    //   282: aload_2
    //   283: ifnull +17 -> 300
    //   286: aload_2
    //   287: invokevirtual 256	java/lang/String:length	()I
    //   290: ifle +10 -> 300
    //   293: aload_0
    //   294: aload_1
    //   295: aload_2
    //   296: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   299: areturn
    //   300: aload_1
    //   301: iconst_1
    //   302: invokestatic 277	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/ReflectionUtils:getFieldNameByGetter	(Ljava/lang/reflect/Method;Z)Ljava/lang/String;
    //   305: astore_2
    //   306: aload_0
    //   307: aload_1
    //   308: aload_2
    //   309: invokespecial 260	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:cacheAttributeName	(Ljava/lang/reflect/Method;Ljava/lang/String;)Ljava/lang/String;
    //   312: areturn
    // Line number table:
    //   Java source line #194	-> byte code offset #0
    //   Java source line #196	-> byte code offset #7
    //   Java source line #198	-> byte code offset #21
    //   Java source line #199	-> byte code offset #28
    //   Java source line #198	-> byte code offset #31
    //   Java source line #199	-> byte code offset #39
    //   Java source line #200	-> byte code offset #41
    //   Java source line #201	-> byte code offset #45
    //   Java source line #202	-> byte code offset #47
    //   Java source line #203	-> byte code offset #57
    //   Java source line #204	-> byte code offset #61
    //   Java source line #205	-> byte code offset #68
    //   Java source line #206	-> byte code offset #79
    //   Java source line #208	-> byte code offset #86
    //   Java source line #209	-> byte code offset #98
    //   Java source line #210	-> byte code offset #103
    //   Java source line #211	-> byte code offset #111
    //   Java source line #212	-> byte code offset #122
    //   Java source line #214	-> byte code offset #129
    //   Java source line #215	-> byte code offset #140
    //   Java source line #216	-> byte code offset #145
    //   Java source line #217	-> byte code offset #153
    //   Java source line #218	-> byte code offset #164
    //   Java source line #220	-> byte code offset #171
    //   Java source line #221	-> byte code offset #183
    //   Java source line #222	-> byte code offset #188
    //   Java source line #223	-> byte code offset #196
    //   Java source line #224	-> byte code offset #207
    //   Java source line #226	-> byte code offset #214
    //   Java source line #227	-> byte code offset #226
    //   Java source line #228	-> byte code offset #231
    //   Java source line #229	-> byte code offset #239
    //   Java source line #230	-> byte code offset #250
    //   Java source line #232	-> byte code offset #257
    //   Java source line #233	-> byte code offset #269
    //   Java source line #234	-> byte code offset #274
    //   Java source line #235	-> byte code offset #282
    //   Java source line #236	-> byte code offset #293
    //   Java source line #240	-> byte code offset #300
    //   Java source line #241	-> byte code offset #306
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	313	0	this	DynamoDBReflector
    //   0	313	1	getter	Method
    //   20	2	2	attributeName	String
    //   41	268	2	attributeName	String
    //   31	9	3	localObject	Object
    //   56	6	3	hashKeyAnnotation	DynamoDBHashKey
    //   96	8	4	indexHashKey	DynamoDBIndexHashKey
    //   138	8	5	rangeKey	DynamoDBRangeKey
    //   181	8	6	indexRangeKey	DynamoDBIndexRangeKey
    //   224	8	7	attribute	DynamoDBAttribute
    //   267	8	8	version	DynamoDBVersionAttribute
    // Exception table:
    //   from	to	target	type
    //   7	21	31	finally
  }
  
  /* Error */
  private String cacheAttributeName(Method getter, String attributeName)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 76	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:writeLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
    //   4: invokevirtual 291	java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock:lock	()V
    //   7: aload_0
    //   8: getfield 57	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:attributeNameCache	Ljava/util/Map;
    //   11: aload_1
    //   12: aload_2
    //   13: invokeinterface 94 3 0
    //   18: pop
    //   19: aload_0
    //   20: getfield 76	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:writeLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
    //   23: invokevirtual 292	java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock:unlock	()V
    //   26: goto +13 -> 39
    //   29: astore_3
    //   30: aload_0
    //   31: getfield 76	com/amazon/ws/emr/hadoop/fs/shaded/com/amazonaws/services/dynamodbv2/datamodeling/DynamoDBReflector:writeLockAttrName	Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
    //   34: invokevirtual 292	java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock:unlock	()V
    //   37: aload_3
    //   38: athrow
    //   39: aload_2
    //   40: areturn
    // Line number table:
    //   Java source line #245	-> byte code offset #0
    //   Java source line #247	-> byte code offset #7
    //   Java source line #249	-> byte code offset #19
    //   Java source line #250	-> byte code offset #26
    //   Java source line #249	-> byte code offset #29
    //   Java source line #250	-> byte code offset #37
    //   Java source line #251	-> byte code offset #39
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	41	0	this	DynamoDBReflector
    //   0	41	1	getter	Method
    //   0	41	2	attributeName	String
    //   29	9	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   7	19	29	finally
  }
  
  Method getSetter(Method getter)
  {
    synchronized (setterCache)
    {
      if (!setterCache.containsKey(getter))
      {
        String fieldName = ReflectionUtils.getFieldNameByGetter(getter, false);
        String setterName = "set" + fieldName;
        Method setter = null;
        try
        {
          setter = getter.getDeclaringClass().getMethod(setterName, new Class[] { getter.getReturnType() });
        }
        catch (NoSuchMethodException e)
        {
          throw new DynamoDBMappingException("Expected a public, one-argument method called " + setterName + " on " + getter.getDeclaringClass(), e);
        }
        catch (SecurityException e)
        {
          throw new DynamoDBMappingException("No access to public, one-argument method called " + setterName + " on " + getter.getDeclaringClass(), e);
        }
        setterCache.put(getter, setter);
      }
      return (Method)setterCache.get(getter);
    }
  }
  
  boolean isVersionAttributeGetter(Method getter)
  {
    synchronized (versionAttributeGetterCache)
    {
      if (!versionAttributeGetterCache.containsKey(getter)) {
        versionAttributeGetterCache.put(getter, 
        
          Boolean.valueOf((getter.getName().startsWith("get")) && (getter.getParameterTypes().length == 0) && 
          (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBVersionAttribute.class))));
      }
      return ((Boolean)versionAttributeGetterCache.get(getter)).booleanValue();
    }
  }
  
  boolean isAssignableKey(Method getter)
  {
    synchronized (autoGeneratedKeyGetterCache)
    {
      if (!autoGeneratedKeyGetterCache.containsKey(getter)) {
        autoGeneratedKeyGetterCache.put(getter, 
        
          Boolean.valueOf((ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBAutoGeneratedKey.class)) && (
          (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBHashKey.class)) || 
          (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBRangeKey.class)) || 
          (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBIndexHashKey.class)) || 
          (ReflectionUtils.getterOrFieldHasAnnotation(getter, DynamoDBIndexRangeKey.class)))));
      }
      return ((Boolean)autoGeneratedKeyGetterCache.get(getter)).booleanValue();
    }
  }
  
  String getPrimaryHashKeyName(Class<?> clazz)
  {
    return getAttributeName(getPrimaryHashKeyGetter(clazz));
  }
  
  String getPrimaryRangeKeyName(Class<?> clazz)
  {
    Method primaryRangeKeyGetter = getPrimaryHashKeyGetter(clazz);
    return primaryRangeKeyGetter == null ? null : 
    
      getAttributeName(getPrimaryRangeKeyGetter(clazz));
  }
  
  boolean hasPrimaryRangeKey(Class<?> clazz)
  {
    return getPrimaryRangeKeyGetter(clazz) != null;
  }
}

/* Location:
 * Qualified Name:     com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBReflector
 * Java Class Version: 6 (50.0)
 * JD-Core Version:    0.7.1
 */